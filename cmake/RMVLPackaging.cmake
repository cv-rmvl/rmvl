if(NOT EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  message(STATUS "CPack is not found. SKIP")
  return()
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  # Deb
  find_program(DPKG_EXECUTABLE dpkg)
  if(DPKG_EXECUTABLE)
    set(CPACK_GENERATOR "DEB")
  else()
    # RPM
    find_program(RPM_EXECUTABLE rpm)
    if(RPM_EXECUTABLE)
      set(CPACK_GENERATOR "RPM")
    else()
      set(CPACK_GENERATOR "TGZ")
    endif()
  endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  # NSIS
  find_program(NSIS_EXECUTABLE makensis)
  if(NSIS_EXECUTABLE)
    set(CPACK_GENERATOR "NSIS")
  else()
    set(CPACK_GENERATOR "ZIP")
  endif()
endif()

if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
  set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*")
  set(X86 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
  set(AARCH64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")
  set(ARM 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64le")
  set(PPC64LE 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
  set(PPC64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips.*|MIPS.*)")
  set(MIPS 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(riscv.*|RISCV.*)")
  set(RISCV 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(loongarch64.*|LOONGARCH64.*)")
  set(LOONGARCH64 1)
else()
  message(WARNING "RMVL: unrecognized target processor configuration")
endif()

# arch
if(X86)
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "i386")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "i686")
elseif(X86_64)
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "x86_64")
elseif(ARM)
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "armhf")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "armhf")
elseif(AARCH64)
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "arm64")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "aarch64")
elseif(PPC64LE)
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "ppc64el")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "ppc64le")
else()
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
  set(CPACK_RPM_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
endif()

if(CPACK_GENERATOR STREQUAL "DEB")
  set(RMVL_PACKAGE_ARCH_SUFFIX ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
elseif(CPACK_GENERATOR STREQUAL "RPM")
  set(RMVL_PACKAGE_ARCH_SUFFIX ${CPACK_RPM_PACKAGE_ARCHITECTURE})
else()
  set(RMVL_PACKAGE_ARCH_SUFFIX ${CMAKE_SYSTEM_PROCESSOR})
endif()
string(TOLOWER ${RMVL_PACKAGE_ARCH_SUFFIX} RMVL_PACKAGE_ARCH_SUFFIX)
string(TOLOWER ${CMAKE_SYSTEM_NAME} RMVL_PACKAGE_OS_SUFFIX)

set(CPACK_PACKAGE_CONTACT "cv-rmvl community")
set(CPACK_PACKAGE_VERSION_MAJOR "${RMVL_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${RMVL_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${RMVL_VERSION_PATCH}")
set(CPACK_PACKAGE_VERSION "${RMVL_VERSION}")
set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.md")
set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${RMVL_VERSION}-${RMVL_PACKAGE_ARCH_SUFFIX}-${RMVL_PACKAGE_OS_SUFFIX}")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${RMVL_VERSION}-${RMVL_PACKAGE_ARCH_SUFFIX}-${RMVL_PACKAGE_OS_SUFFIX}")

# deb options
set(CPACK_DEBIAN_PACKAGE_DEPENDS "build-essential")
if(WITH_OPENCV)
  set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_DEBIAN_PACKAGE_DEPENDS}, libopencv-dev")
endif()
if(BUILD_PYTHON)
  set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_DEBIAN_PACKAGE_DEPENDS}, python3-dev, pybind11-dev")
endif()

# NSIS options
set(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}")
set(CPACK_NSIS_MUI_ICON "${PROJECT_SOURCE_DIR}/doc/favicon.ico")
set(CPACK_NSIS_MUI_UNIICON "${PROJECT_SOURCE_DIR}/doc/favicon.ico")
set(CPACK_NSIS_URL_INFO_ABOUT "${CMAKE_PROJECT_HOMEPAGE_URL}")

include(CPack)