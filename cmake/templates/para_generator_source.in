/**
 * @file @target_name@.cpp
 * @author RMVL Community
 * @brief @class_name@ module source file (Generated by CMake automatically, DO NOT MODIFY!)
 * 
 * @copyright Copyright @year@ (c), RMVL Community
 * 
 */

#include <mutex>
#include <shared_mutex>
#include <unordered_map>

#include <opencv2/core/persistence.hpp>

#include "@para_include_path@"

namespace rm::para {

static std::shared_mutex g_paramtx{};

@para_source_enum_s2t@
@para_source_enum_t2s@
bool @class_name@::read(const std::string &path) {
    std::shared_lock lk(g_paramtx);
    cv::FileStorage fs(path, cv::FileStorage::READ);
    if (!fs.isOpened())
        return false;
    cv::FileNode node;

@para_source_read@
    return true;
}

bool @class_name@::write(const std::string &path) const {
    std::unique_lock lk(g_paramtx);
    cv::FileStorage fs(path, cv::FileStorage::WRITE);
    if (!fs.isOpened())
        return false;

@para_source_write@
    return true;
}

} // rm::para
